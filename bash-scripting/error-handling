#!/usr/bin/env bash

#set +e
#? default behavior, continues script execution if a cmd fails

# set -e
#? exits script if any command fails
#! it's bad with piping, only checks last cmd failure
#? could exit script if a file doesn't exist in `if [[ -f file ]]`

# set -o errexit
#! still bad piping behavior

# if (! bad_command); then
#     exit 1 #? exit script with error code, use different error codes for different erorrs
# fi

# ls /nonexistent 2>/dev/null || ls . #? use whatever command works first

#! best way to handle errors is with trap
#? SIGINT is the signal sent to the script when you ctrl+c
#? trap "command to do something" error
trap "echo -e '\nTerminated by Ctrl+c'; exit" SIGINT 1 3 6 #? -e enables backslash interpretation, 1:CLEAN 2:SIGINT 3:QUIT 6:CANCEL
#? you can use this to clean up after someone force exits the script

trap "" 45 #? stops user from terminating script using this signal

error_handler() { #? takes 2 args, exit code and line number
    echo "Error: ($1) occured on $2"
}

trap "error_handler $? $LINENO; ls /" ERR #? to catch errors, try, except
bad_command

main() {
    echo "inside main() func"
    bad_command
    second
    third
    exit $?
}

second() {
    echo "after call to main()"
    echo "inside second func"
}

third() {
    echo "inside third func"
}

main
